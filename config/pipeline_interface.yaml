# The pipeline interface file describes how the looper, which submits jobs, knows
# what resources to request for a pipeline, and what arguments to pass to the
# pipeline. For each pipeline, you specify two components: an arguments list,
# and a resources list, like so:
#
# pipeline_script:
#   name: value  # used for assessing pipeline flags (optional)
#   arguments:
#     "-k" : value
#     "--key2" : value
#     "--key3" : null # value-less argument flags
#   resources:
#     default:
#       file_size: "0"
#       cores: "4"
#       mem: "6000"
#       time: "2-00:00:00"
#     resource_package_name:
#       file_size: "0"
#       cores: "4"
#       mem: "6000"
#       time: "2-00:00:00"

# Arguments: the key corresponds verbatim to the string that will be passed on the
# command line to the pipeline. The value corresponds to an attribute of the sample,
# which will be derived from the sample_annotation csv file.
#
# The looper will automatically add arguments for:
# -c: config_file (the pipeline config file specified in the project config file;
# or the default config file, if it exists)
# -p: cores (the number of cores specified by the resource package chosen)

# Resources: You must define at least 1 option named 'default' with file_size=0.
# Add as many additional resource sets as you want, with any names.
# The looper will determine which resource package to use based on the file_size
# of the input file. It will select the lowest resource package whose file_size
# attribute does not exceed the size of the input file.

wgbs.py:
  name: WGBS  # Name used by pypiper so looper can find the logs
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": genome
    "--input": data_source
    "--single-or-paired": read_type
  resources:
    default:
      file_size: "0"
      cores: "8"
      mem: "32000"
      time: "2-00:00:00"
    medium:
      file_size: "3"
      cores: "16"
      mem: "64000"
      time: "4-00:00:00"
    high:
      file_size: "10"
      cores: "24"
      mem: "64000"
      time: "8-00:00:00"
    huge:
      file_size: "30"
      cores: "24"
      mem: "64000"
      time: "50-00:00:00"

rrbs.py:
  name: RRBS
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": genome
    "--input": data_source
    "--single-or-paired": read_type
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "16000"
      time: "1-00:00:00"
    medium:
      file_size: "2"
      cores: "4"
      mem: "16000"
      time: "1-12:00:00"
    high:
      file_size: "4"
      cores: "6"
      mem: "16000"
      time: "2-00:00:00"

rnaBitSeq.py:
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": transcriptome
    "--input": data_source
    "--single-or-paired": read_type
    "--ercc-mix": ERCC_spikein
  optional_arguments:
    "--input2": read2_val
  resources:
    default:
      file_size: "0"
      cores: "6"
      mem: "36000"
      time: "2-00:00:00"

rnaTopHat.py:
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": genome
    "--input": data_source
    "--single-or-paired": read_type
  optional_arguments:
    "-w": wigsum
  resources:
    default:
      file_size: "0"
      cores: "2"
      mem: "60000"
      time: "10-00:00:00"

atacseq.py:
  arguments:
    "--sample-yaml": yaml_file
    "-I": sample_name
    "-G": genome
  looper_args: True
  required_input_files: [data_source]
  ngs_input_files: [data_source]
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "16000"
      time: "08:00:00"
    medium:
      file_size: "1"
      cores: "8"
      mem: "32000"
      time: "1-12:00:00"
    high:
      file_size: "2"
      cores: "12"
      mem: "64000"
      time: "4-00:00:00"

chipseq.py:
  arguments:
    "--sample-yaml": yaml_file
    "-I": sample_name
    "-G": genome
  looper_args: True
  required_input_files: [data_source]
  ngs_input_files: [data_source]
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "16000"
      time: "08:00:00"
    medium:
      file_size: "1"
      cores: "8"
      mem: "32000"
      time: "1-12:00:00"
    high:
      file_size: "2"
      cores: "12"
      mem: "64000"
      time: "4-00:00:00"

starrseq.py:
  arguments:
    "--sample-yaml": yaml_file
    "-I": sample_name
    "-G": genome
  looper_args: True
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "16000"
      time: "08:00:00"
    medium:
      file_size: "1"
      cores: "8"
      mem: "32000"
      time: "1-12:00:00"
    high:
      file_size: "2"
      cores: "12"
      mem: "64000"
      time: "4-00:00:00"

chiapet.py:
  name: ChIA-PET
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": genome
    "--input": data_source
    "--single-or-paired": read_type
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "12000"
      time: "12-00:00:00"

quantseq.py:
  name: QUANT-SEQ
  looper_args: True
  arguments:
    "--sample-name": sample_name
    "--genome": genome
    "--input": data_source
    "--single-or-paired": read_type
  resources:
    default:
      file_size: "0"
      cores: "4"
      mem: "12000"
      time: "12-00:00:00"

amplicon_simple.py:
  arguments:
    "-n": sample_name
    "-i": data_source
    "-a": amplicon
    "-g": guide_rna
  looper_args: True
  resources:
    default:
      file_size: "0"
      cores: "1"
      mem: "8000"
      time: "0:30:00"

dropseq.py:
  arguments:
    "--sample-yaml": yaml_file
    "-I": sample_name
    "-G": genome
  looper_args: True
  resources:
    default:
      file_size: "0"
      cores: "8"
      mem: "60000"
      time: "1-12:00:00"
    high:
      file_size: "4"
      cores: "8"
      mem: "80000"
      time: "3-12:00:00"
